1. Update system
sudo apt update

(2 sampai 4 khusus jika ingin menggunakan python 3.11
2. Instal paket yang diperlukan untuk mengelola PPA dan membangun Python dari source.
sudo apt install software-properties-common build-essential libssl-dev libffi-dev zlib1g-dev

3. Tambahkan PPA deadsnakes jika Anda ingin menginstal versi Python tertentu yang tidak tersedia di repositori default Ubuntu.
sudo add-apt-repository ppa:deadsnakes/ppa


4. Install versi pyton yang di inginkan
sudo apt install python3.11

pastikan sudah terinstall dengan benar:
python3.11 --version
whereis python3

5. Install pip
apt install python3-pip
pastikan sudah terinstall dengan benar:
pip3 --version

6. Install virtual environment
sudo apt install python3-venv

7.Buat folder untuk flask lalu buat virtual environment
mkdir /var/www/flaskApp
cd /var/www/flaskApp
python3.11 -m venv env (Membuat virtual environment dengan nama ‘env’ untuk python 3.11 tetapi ini memerlukan konfigurasi an instalasi tambahan)
python3 -m venv env(untuk memakai python yang dipilih oleh system)
source env/bin/activate (Mengaktifkan virtual environment)

8. Install Flask
pip3 install Flask

9. Install dan atur wsgi
deactivate (Mematikan virtual environment)
sudo apt-get install libapache2-mod-wsgi-py3 python3-dev (python3-dev mungkin di perlukan untuk wsgi)

10. Install requirement python
(Untuk masuk Kembali ke virtual environtment)
cd /var/www/flaskApp && source env/bin/activate

pip3 install -r requirementss.txt

11. Install tensorflow-cpu
pip3 install tensorflow-cpu

12. Buat file wsgi
sudo nano /var/www/flaskApp/flaskApp.wsgi
Berikut yang ada di dalam file:
import sys
sys.path.insert(0,'/var/www/flaskApp')

from app import app as application


13. Buat file flask (Ini untuk mengetes jika flask berfungsi dengan baik)
sudo nano /var/www/flaskApp/app.py
Berikut yang ada di dalam file:
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello, Flask!"

@app.route('/blogs')
def blogs():
  return 'Welcome to The Blog App'

if __name__ == '__main__':
  app.run(debug=True)

14. Jalankan flasknya
python app.py

15. Atur konfigurasi WSGI di apache
Tambahkan hal berikut di /etc/apache2/sites-available/000-default-le-ssl.conf:
        WSGIDaemonProcess flaskApp user=www-data group=www-data threads=5 python-home=/var/www/flaskApp/env python-path>        	WSGIScriptAlias /flask /var/www/flaskApp/flaskApp.wsgi

        <Directory /var/www/flaskApp>
            WSGIProcessGroup flaskApp
            WSGIApplicationGroup %{GLOBAL}
            Order deny,allow
            Allow from all
            Require all granted
        </Directory>

(Restart apache)
sudo systemctl restart apache2

16. Tes jika flask sudah berfungsi dengan baik dengan masuk domain berikut:
https://lansotpuskess.site/flask

17. Copy file flask_api prediksi dan file file lain yang dibutuhkan untuk prediksi di "/var/www/flaskApp"

18. Ubah path untuk file one-hot encoding, model dan yang lain lain seperti berikut:
# Baca struktur kolom one-hot encoding
with open('/var/www/flaskApp/one_hot_columns.json', 'r') as f:
    one_hot_columns = json.load(f)

# Muat scaler untuk input
with open('/var/www/flaskApp/scaler_input.pkl', 'rb') as input_scaler_file:
    scaler_input = pickle.load(input_scaler_file)

# Muat scaler untuk output
with open('/var/www/flaskApp/scaler_output.pkl', 'rb') as output_scaler_file:
    scaler_output = pickle.load(output_scaler_file)


# Memuat modelnya
model = tf.keras.models.load_model('/var/www/flaskApp/Prediksi_Kebutuhan_Obat.keras')

19. Ganti url di controller gudang pada fungsi untuk memprediksi menjadi "https://lansotpuskess.site/flask/predict"